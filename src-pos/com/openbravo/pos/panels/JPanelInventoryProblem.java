/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelSupplyReport.java
 *
 * Created on Jul 17, 2009, 5:27:54 PM
 */

package com.openbravo.pos.panels;


import com.openbravo.pos.forms.JPanelView;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.forms.AppLocal;
import java.awt.*;
import java.text.ParseException;
import javax.swing.*;
import java.util.Date;
import java.util.UUID;
import javax.swing.table.*;
import com.openbravo.data.loader.StaticSentence;
import com.openbravo.data.loader.SerializerWriteBasic;
import com.openbravo.beans.*;
import com.openbravo.format.Formats;
import com.openbravo.basic.BasicException;
import com.openbravo.data.loader.Datas;
import com.openbravo.data.gui.MessageInf;
import com.openbravo.data.gui.TableRendererBasic;
import com.openbravo.pos.forms.BeanFactoryApp;
import com.openbravo.pos.forms.BeanFactoryException;
import com.openbravo.pos.scripting.ScriptEngine;
import com.openbravo.pos.scripting.ScriptException;
import com.openbravo.pos.scripting.ScriptFactory;
import com.openbravo.pos.forms.DataLogicSystem;
import com.openbravo.pos.printer.TicketParser;
import com.openbravo.pos.printer.TicketPrinterException;
/**
 *
 * @author gjergj
 */
public class JPanelInventoryProblem extends  JPanel implements JPanelView, BeanFactoryApp {

    private AppView m_App;
    private DataLogicSystem m_dlSystem;

    private InventoryModel m_InventoryModel = null;
    private SupplyModel m_SupplyModel = null;

    private TicketParser m_TTP;
    /** Creates new form JPanelSupplyReport */
    public JPanelInventoryProblem() {
        initComponents();
    }

    public void init(AppView app) throws BeanFactoryException {

        m_App = app;
        m_dlSystem = (DataLogicSystem) m_App.getBean("com.openbravo.pos.forms.DataLogicSystemCreate");
        m_TTP = new TicketParser(m_App.getDeviceTicket(), m_dlSystem);

    }

    public Object getBean() {
        return this;
    }

    public JComponent getComponent() {
        return this;
    }

    public String getTitle() {
        return AppLocal.getIntString("Menu.CloseTPV");
    }

    public void activate() throws BasicException {
        //m_jdate.setText(Formats.TIMESTAMP.formatValue(DateUtils.getTodayMinutes()));
        loadData();
    }

    public boolean deactivate() {
        // se me debe permitir cancelar el deactivate
        return true;
    }


    private void loadData() throws BasicException {
        // LoadData
        m_InventoryModel = InventoryModel.loadInstance(m_App);
        m_SupplyModel = SupplyModel.loadInstance(m_App);
    }

    private void printPayments(String report) {

        String sresource = m_dlSystem.getResourceAsXML(report);
        if (sresource == null) {
            MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotprintticket"));
            msg.show(this);
        } else {
            try {
                ScriptEngine script = ScriptFactory.getScriptEngine(ScriptFactory.VELOCITY);
                script.put("supply", m_InventoryModel);
                m_TTP.printTicket(script.eval(sresource).toString());
            } catch (ScriptException e) {
                MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotprintticket"), e);
                msg.show(this);
            } catch (TicketPrinterException e) {
                MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotprintticket"), e);
                msg.show(this);
            }
        }
    }

   private void printPaymentsSupply(String report) {

        String sresource = m_dlSystem.getResourceAsXML(report);
        if (sresource == null) {
            MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotprintticket"));
            msg.show(this);
        } else {
            try {
                ScriptEngine script = ScriptFactory.getScriptEngine(ScriptFactory.VELOCITY);
                script.put("supply", m_SupplyModel);
                m_TTP.printTicket(script.eval(sresource).toString());
            } catch (ScriptException e) {
                MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotprintticket"), e);
                msg.show(this);
            } catch (TicketPrinterException e) {
                MessageInf msg = new MessageInf(MessageInf.SGN_WARNING, AppLocal.getIntString("message.cannotprintticket"), e);
                msg.show(this);
            }
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m_jPrintInventoryProblem = new javax.swing.JButton();
        m_jPrintsupplyReport = new javax.swing.JButton();

        m_jPrintInventoryProblem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/important.png"))); // NOI18N
        m_jPrintInventoryProblem.setText("Kerkese Per Furnizim");
        m_jPrintInventoryProblem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jPrintInventoryProblemActionPerformed(evt);
            }
        });

        m_jPrintsupplyReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openbravo/images/fileprint.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pos_messages"); // NOI18N
        m_jPrintsupplyReport.setText(bundle.getString("Menu.Supply  ")); // NOI18N
        m_jPrintsupplyReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_jPrintsupplyReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(m_jPrintsupplyReport)
                    .addComponent(m_jPrintInventoryProblem))
                .addContainerGap(360, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(m_jPrintInventoryProblem)
                .addGap(30, 30, 30)
                .addComponent(m_jPrintsupplyReport)
                .addContainerGap(90, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void m_jPrintsupplyReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_jPrintsupplyReportActionPerformed
        // TODO add your handling code here:
        printPaymentsSupply("Printer.SupplyReport");
}//GEN-LAST:event_m_jPrintsupplyReportActionPerformed

    private void m_jPrintInventoryProblemActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        printPayments("Printer.SupplyReport");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton m_jPrintInventoryProblem;
    private javax.swing.JButton m_jPrintsupplyReport;
    // End of variables declaration//GEN-END:variables

}
